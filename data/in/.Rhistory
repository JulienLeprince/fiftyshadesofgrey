install.packages(c("doParallel", "foreach"))
library(cstmr)
library(stringr)
install.packages("ctsmr", repos = c(ctsmr = "http://ctsm.info/repo/dev", getOption("repos")))
library(cstmr)
library(cstmr)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
library(knitr)
## Init by deleting all variables and functions
rm(list=ls())
## Set the working directory. Change this to the location of the root file on the computer. Note that "/" is always used in R, also in Windows
root_directory = "C:/Users/20190285/Documents/GitHub/fiftyshadesofgrey"
setwd(paste(root_directory, "/src", sep=""))
# Install CSTM-R
install.packages("ctsmr", repos = c(ctsmr = "http://ctsm.info/repo/dev", getOption("repos")), type="source")
library(ctsmr)
library(stringr)
library(lubridate)
library(foreach)
library(doParallel)
path_out = paste(root_directory, "/data/out/", sep="")
path_in = paste(root_directory, "/data/in/", sep="")
# Source the scripts with functions in the "src" folder. Just a neat way of arranging helping functions in R
source("allmodels.R")
source("utils.R")
# Get all input files names
setwd(path_in)
list_file_names <- list.files(pattern = "blg_*")
setpar <- function(tmpl=NA,...)
{
## Get par list
p <- par(no.readonly=TRUE)
## Templates
if(!is.na(tmpl))
{
if(tmpl=="ts")
{
par(mfrow=c(3,1),
oma = c(3,0,2,2),
mar = c(0,4,0.5,0),
xaxt = "n",
mgp = c(2.2,0.4,0),
tcl = -0.4
)
}
if(tmpl=="pdf")
{
par(mar = c(4,4,1,1),
mgp = c(2.2,0.7,0),
tcl = -0.4
)
}
}
## Replace all the parameters given in prm
## Get only the ... parameters
i <- which(!names(match.call()) %in% names(match.call(expand.dots=FALSE)))
if(length(i)>0)
{
par(...)
## prm <- as.list(match.call()[i])
## p <- list()
## for(i in 1:length(prm))
##   {
##     p$new <- eval(prm[[i]])
##     names(p)[i] <- names(prm)[i]
##   }
## par(p)
}
## Set par and return the original par
#options(warn = (-1))
#options(warn = 1)
invisible(p)
}
asP <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXct
switch(class(timeVal[1])[1],
character=as.POSIXct(timeVal,tz=tz, ...),
POSIXct=timeVal,
POSIXlt=timeVal,
ISOdate(1970,1,1,0)+timeVal
)
}
asPlt <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXlt
switch(class(timeVal[1])[1],
character=as.POSIXlt(timeVal,tz=tz, ...),
POSIXct=as.POSIXlt(timeVal),
POSIXlt=timeVal,
as.POSIXlt(ISOdate(1970,1,1,0)+timeVal)
)
}
per <- function(tstart,time,tend)
{
asP(tstart) < time & time <= asP(tend)
}
### CHOSE FILE
file <- list_file_names[3]
df <- read.csv(paste(path_in,file,sep=""),sep=";",header=TRUE)
# Get blg uuid from file name
split_file_name <- str_split_fixed(file, "_", 2)
uuid_filtering <- sapply(split_file_name, tail, 1)[[2]]
uuid_filtering <- str_split_fixed(uuid_filtering, ".csv", 2)[1]
# Convert to datetime
df$timedate <- ymd_hms(df$t)
## df$t is now hours since start of the experiment.
df$t <- seq(0, length(df$t)-1, by=1) / 4  # dt = 15 minutes
# Define input X
X <- df[c("t", "timedate", "Ps", "Ta", "Thm", "yTi", "timedate")]
# Removing NA values
X = X[complete.cases(X), ]
start_date <- as.Date(X$timedate[1], format='%a %b %d %H:%M:%S UTC %Y')
## ----plotData, fig.height=6----------------------------------------------
## Plot the time series (see "functions/setpar.R" to see the plot setup function)
setpar("ts", mfrow=c(4,1))
gridSeq <- seq(asP(toString(start_date)),by="days",len=length(X$t)/4/24)
##
plot(X$timedate,X$yTi,type="n",xlab="",ylab="yTi")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$yTi)
##
plot(X$timedate,X$Ta,type="n",xlab="",ylab="Ta")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ta)
##
plot(X$timedate,X$Thm,type="n",xlab="",ylab="Thm")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Thm)
##
plot(X$timedate,X$Ps,type="n",xlab="",ylab="Ps")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ps)
axis.POSIXct(1, X$timedate, xaxt="s", format="%Y-%m-%d")
## Init by deleting all variables and functions
rm(list=ls())
library(stringr)
library(lubridate)
library(knitr)
## Set the working directory. Change this to the location of the root file on the computer. Note that "/" is always used in R, also in Windows
root_directory = "C:/Users/20190285/Documents/GitHub/fiftyshadesofgrey"
path_out = paste(root_directory, "/data/out/", sep="")
path_in = paste(root_directory, "/data/in/", sep="")
setwd(paste(root_directory, "/src", sep=""))
# Get all input files names
setwd(path_in)
list_file_names <- list.files(pattern = "blg_*")
setpar <- function(tmpl=NA,...)
{
## Get par list
p <- par(no.readonly=TRUE)
## Templates
if(!is.na(tmpl))
{
if(tmpl=="ts")
{
par(mfrow=c(3,1),
oma = c(3,0,2,2),
mar = c(0,4,0.5,0),
xaxt = "n",
mgp = c(2.2,0.4,0),
tcl = -0.4
)
}
if(tmpl=="pdf")
{
par(mar = c(4,4,1,1),
mgp = c(2.2,0.7,0),
tcl = -0.4
)
}
}
## Replace all the parameters given in prm
## Get only the ... parameters
i <- which(!names(match.call()) %in% names(match.call(expand.dots=FALSE)))
if(length(i)>0)
{
par(...)
## prm <- as.list(match.call()[i])
## p <- list()
## for(i in 1:length(prm))
##   {
##     p$new <- eval(prm[[i]])
##     names(p)[i] <- names(prm)[i]
##   }
## par(p)
}
## Set par and return the original par
#options(warn = (-1))
#options(warn = 1)
invisible(p)
}
asP <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXct
switch(class(timeVal[1])[1],
character=as.POSIXct(timeVal,tz=tz, ...),
POSIXct=timeVal,
POSIXlt=timeVal,
ISOdate(1970,1,1,0)+timeVal
)
}
asPlt <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXlt
switch(class(timeVal[1])[1],
character=as.POSIXlt(timeVal,tz=tz, ...),
POSIXct=as.POSIXlt(timeVal),
POSIXlt=timeVal,
as.POSIXlt(ISOdate(1970,1,1,0)+timeVal)
)
}
per <- function(tstart,time,tend)
{
asP(tstart) < time & time <= asP(tend)
}
### CHOSE FILE
file <- list_file_names[3]
df <- read.csv(paste(path_in,file,sep=""),sep=";",header=TRUE)
# Get blg uuid from file name
split_file_name <- str_split_fixed(file, "_", 2)
uuid_filtering <- sapply(split_file_name, tail, 1)[[2]]
uuid_filtering <- str_split_fixed(uuid_filtering, ".csv", 2)[1]
# Convert to datetime
df$timedate <- ymd_hms(df$t)
## df$t is now hours since start of the experiment.
df$t <- seq(0, length(df$t)-1, by=1) / 4  # dt = 15 minutes
# Define input X
X <- df[c("t", "timedate", "Ps", "Ta", "Thm", "yTi", "timedate")]
# Removing NA values
X = X[complete.cases(X), ]
start_date <- as.Date(X$timedate[1], format='%a %b %d %H:%M:%S UTC %Y')
## ----plotData, fig.height=6----------------------------------------------
## Plot the time series (see "functions/setpar.R" to see the plot setup function)
setpar("ts", mfrow=c(4,1))
gridSeq <- seq(asP(toString(start_date)),by="days",len=length(X$t)/4/24)
##
plot(X$timedate,X$yTi,type="n",xlab="",ylab="yTi")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$yTi)
##
plot(X$timedate,X$Ta,type="n",xlab="",ylab="Ta")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ta)
##
plot(X$timedate,X$Thm,type="n",xlab="",ylab="Thm")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Thm)
##
plot(X$timedate,X$Ps,type="n",xlab="",ylab="Ps")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ps)
axis.POSIXct(1, X$timedate, xaxt="s", format="%Y-%m-%d")
## Init by deleting all variables and functions
rm(list=ls())
library(stringr)
library(lubridate)
library(knitr)
## Set the working directory. Change this to the location of the root file on the computer. Note that "/" is always used in R, also in Windows
root_directory = "C:/Users/20190285/Documents/GitHub/fiftyshadesofgrey"
path_out = paste(root_directory, "/data/out/", sep="")
path_in = paste(root_directory, "/data/in/", sep="")
setwd(paste(root_directory, "/src", sep=""))
# Get all input files names
setwd(path_in)
list_file_names <- list.files(pattern = "blg_*")
setpar <- function(tmpl=NA,...)
{
## Get par list
p <- par(no.readonly=TRUE)
## Templates
if(!is.na(tmpl))
{
if(tmpl=="ts")
{
par(mfrow=c(3,1),
oma = c(3,0,2,2),
mar = c(0,4,0.5,0),
xaxt = "n",
mgp = c(2.2,0.4,0),
tcl = -0.4
)
}
if(tmpl=="pdf")
{
par(mar = c(4,4,1,1),
mgp = c(2.2,0.7,0),
tcl = -0.4
)
}
}
## Replace all the parameters given in prm
## Get only the ... parameters
i <- which(!names(match.call()) %in% names(match.call(expand.dots=FALSE)))
if(length(i)>0)
{
par(...)
## prm <- as.list(match.call()[i])
## p <- list()
## for(i in 1:length(prm))
##   {
##     p$new <- eval(prm[[i]])
##     names(p)[i] <- names(prm)[i]
##   }
## par(p)
}
## Set par and return the original par
#options(warn = (-1))
#options(warn = 1)
invisible(p)
}
asP <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXct
switch(class(timeVal[1])[1],
character=as.POSIXct(timeVal,tz=tz, ...),
POSIXct=timeVal,
POSIXlt=timeVal,
ISOdate(1970,1,1,0)+timeVal
)
}
asPlt <- function(timeVal, tz="GMT", ...)
{
## For easy conversion from string or seconds since 1970-01-01 to POSIXlt
switch(class(timeVal[1])[1],
character=as.POSIXlt(timeVal,tz=tz, ...),
POSIXct=as.POSIXlt(timeVal),
POSIXlt=timeVal,
as.POSIXlt(ISOdate(1970,1,1,0)+timeVal)
)
}
per <- function(tstart,time,tend)
{
asP(tstart) < time & time <= asP(tend)
}
### CHOSE FILE
file <- list_file_names[3]
df <- read.csv(paste(path_in,file,sep=""),sep=";",header=TRUE)
# Get blg uuid from file name
split_file_name <- str_split_fixed(file, "_", 2)
uuid_filtering <- sapply(split_file_name, tail, 1)[[2]]
uuid_filtering <- str_split_fixed(uuid_filtering, ".csv", 2)[1]
# Convert to datetime
df$timedate <- ymd_hms(df$t)
## df$t is now hours since start of the experiment.
df$t <- seq(0, length(df$t)-1, by=1) / 4  # dt = 15 minutes
# Define input X
X <- df[c("t", "timedate", "Ps", "Ta", "Thm", "yTi", "timedate")]
# Removing NA values
X = X[complete.cases(X), ]
start_date <- as.Date(X$timedate[1], format='%a %b %d %H:%M:%S UTC %Y')
## ----plotData, fig.height=6----------------------------------------------
## Plot the time series (see "functions/setpar.R" to see the plot setup function)
setpar("ts", mfrow=c(4,1))
gridSeq <- seq(asP(toString(start_date)),by="days",len=length(X$t)/4/24)
##
plot(X$timedate,X$yTi,type="n",xlab="",ylab="yTi")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$yTi)
##
plot(X$timedate,X$Ta,type="n",xlab="",ylab="Ta")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ta)
##
plot(X$timedate,X$Thm,type="n",xlab="",ylab="Thm")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Thm)
##
plot(X$timedate,X$Ps,type="n",xlab="",ylab="Ps")
abline(v=gridSeq,h=0,col="grey85",lty=3)
lines(X$timedate,X$Ps)
axis.POSIXct(1, X$timedate, xaxt="s", format="%Y-%m-%d")
